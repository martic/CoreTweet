<Type Name="Friendships" FullName="CoreTweet.Core.Friendships">
  <TypeSignature Language="C#" Value="public class Friendships : CoreTweet.Core._Tokens" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Friendships extends CoreTweet.Core._Tokens" />
  <AssemblyInfo>
    <AssemblyName>CoreTweet</AssemblyName>
    <AssemblyVersion>1.0.4845.5780</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CoreTweet.Core._Tokens</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>GET/POST Friendships</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public CoreTweet.User Create (System.Linq.Expressions.Expression&lt;Func&lt;string,object&gt;&gt;[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CoreTweet.User Create(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;string, object&gt;&gt;[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.4845.5780</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreTweet.User</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.String,System.Object&gt;&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parameters">
            Parameters.
            </param>
        <summary>
          <para>Allows the authenticating users to follow the user specified in the ID parameter.</para>
          <para>Returns the befriended user in the requested format when successful. Returns a string describing the failure condition when unsuccessful. If you are already friends with the user a HTTP 403 may be returned, though for performance reasons you may get a 200 OK message even if the friendship already exists.</para>
          <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
          <para>Note: Providing either screen_name or user_id is required.</para>
          <para>Avaliable parameters: </para>
          <para>
            <paramref name="string screen_name (optional)" /> : The screen name of the user for whom to befriend.</para>
          <para>
            <paramref name="long user_id (optional)" /> : The ID of the user for whom to befriend.</para>
          <para>
            <paramref name="bool follow (optional)" /> : Enable notifications for the target user.</para>
        </summary>
        <returns>The user.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Destroy">
      <MemberSignature Language="C#" Value="public CoreTweet.User Destroy (System.Linq.Expressions.Expression&lt;Func&lt;string,object&gt;&gt;[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CoreTweet.User Destroy(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;string, object&gt;&gt;[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.4845.5780</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreTweet.User</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.String,System.Object&gt;&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parameters">
            Parameters.
            </param>
        <summary>
          <para>Allows the authenticating user to unfollow the user specified in the ID parameter.</para>
          <para>Returns the unfollowed user in the requested format when successful. Returns a string describing the failure condition when unsuccessful.</para>
          <para>Actions taken in this method are asynchronous and changes will be eventually consistent.</para>
          <para>Note: Providing either screen_name or user_id is required.</para>
          <para>Avaliable parameters: </para>
          <para>
            <paramref name="string screen_name (optional)" /> : The screen name of the user for whom to unfollow.</para>
          <para>
            <paramref name="long user_id (optional)" /> : The ID of the user for whom to unfollow.</para>
        </summary>
        <returns>The user.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Incoming">
      <MemberSignature Language="C#" Value="public CoreTweet.Cursored&lt;long&gt; Incoming (System.Linq.Expressions.Expression&lt;Func&lt;string,object&gt;&gt;[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CoreTweet.Cursored`1&lt;int64&gt; Incoming(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;string, object&gt;&gt;[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.4845.5780</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreTweet.Cursored&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.String,System.Object&gt;&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parameters">
            Parameters.
            </param>
        <summary>
          <para>Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.</para>
          <para>Avaliable parameters: </para>
          <para>
            <paramref name="long cursor (semi-optional)" /> : Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page." The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
        </summary>
        <returns>IDs.</returns>
        <remarks>To be added.</remarks>
        <see cref="!:https://dev.twitter.com/docs/misc/cursoring" />
      </Docs>
    </Member>
    <Member MemberName="Lookup">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;CoreTweet.Friendship&gt; Lookup (System.Linq.Expressions.Expression&lt;Func&lt;string,object&gt;&gt;[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class CoreTweet.Friendship&gt; Lookup(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;string, object&gt;&gt;[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.4845.5780</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;CoreTweet.Friendship&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.String,System.Object&gt;&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parameters">
            Parameters.
            </param>
        <summary>
          <para>Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided. Values for connections can be: following, following_requested, followed_by, none.</para>
          <para>Avaliable parameters: </para>
          <para>
            <paramref name="string screen_name (optional)" /> : A comma separated list of screen names, up to 100 are allowed in a single request.</para>
          <para>
            <paramref name="string user_id (ooptional)" /> : A comma separated list of user IDs, up to 100 are allowed in a single request.</para>
        </summary>
        <returns>The Friendships.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NoRetweetsIds">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;long&gt; NoRetweetsIds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;int64&gt; NoRetweetsIds() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.4845.5780</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.</para>
          <para>Use POST friendships/update to set the "no retweets" status for a given user account on behalf of the current user.</para>
          <para>Avaliable parameters: Nothing.</para>
        </summary>
        <returns>
            Ids.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Outgoing">
      <MemberSignature Language="C#" Value="public CoreTweet.Cursored&lt;long&gt; Outgoing (System.Linq.Expressions.Expression&lt;Func&lt;string,object&gt;&gt;[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CoreTweet.Cursored`1&lt;int64&gt; Outgoing(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;string, object&gt;&gt;[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.4845.5780</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreTweet.Cursored&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.String,System.Object&gt;&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parameters">
            Parameters.
            </param>
        <summary>
          <para>Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.</para>
          <para>Avaliable parameters: </para>
          <para>
            <paramref name="long cursor (semi-optional)" /> : Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first "page."The response from the API will include a previous_cursor and next_cursor to allow paging back and forth. See Using cursors to navigate collections for more information.</para>
        </summary>
        <returns>IDs.</returns>
        <remarks>To be added.</remarks>
        <see cref="!:https://dev.twitter.com/docs/misc/cursoring" />
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public CoreTweet.RelationShip Show (System.Linq.Expressions.Expression&lt;Func&lt;string,object&gt;&gt;[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CoreTweet.RelationShip Show(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;string, object&gt;&gt;[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.4845.5780</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreTweet.RelationShip</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.String,System.Object&gt;&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parameters">
            Parameters.
            </param>
        <summary>
          <para>Returns detailed information about the relationship between two arbitrary users.</para>
          <para>Note: At least one source and one target, whether specified by IDs or screen_names, should be provided to this method.</para>
          <para>Avaliable parameters: </para>
          <para>
            <paramref name="long source_id (optional)" /> : The user_id of the subject user.</para>
          <para>
            <paramref name="string source_screen_name (optional)" /> : The screen_name of the subject user.</para>
          <para>
            <paramref name="long target_id (optional)" /> : The user_id of the target user.</para>
          <para>
            <paramref name="string target_screen_name (optional)" /> : The screen_name of the target user.</para>
        </summary>
        <returns>The relationship.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public CoreTweet.RelationShip Update (System.Linq.Expressions.Expression&lt;Func&lt;string,object&gt;&gt;[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CoreTweet.RelationShip Update(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;string, object&gt;&gt;[] parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.4845.5780</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreTweet.RelationShip</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.String,System.Object&gt;&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parameters">
            Parameters.
            </param>
        <summary>
          <para>Allows one to enable or disable retweets and device notifications from the specified user.</para>
          <para>Note: Providing either screen_name or user_id is required.</para>
          <para>Avaliable parameters: </para>
          <para>
            <paramref name="string screen_name (optional)" /> : The screen name of the user for whom to befriend.</para>
          <para>
            <paramref name="long user_id (optional)" /> : The ID of the user for whom to befriend.</para>/// <para><paramref name="" /> :</para><para><paramref name="bool device (optional)" /> : Enable/disable device notifications from the target user.</para><para><paramref name="bool retweets (optional)" /> : Enable/disable retweets from the target user.</para></summary>
        <returns>The relationship.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
