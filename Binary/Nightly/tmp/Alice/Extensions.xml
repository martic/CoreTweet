<Type Name="Extensions" FullName="Alice.Extensions">
  <TypeSignature Language="C#" Value="public static class Extensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Extensions extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>CoreTweet</AssemblyName>
    <AssemblyVersion>1.0.4845.5780</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Alice's extension methods.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Conbinate&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Tuple&lt;T1,T2&gt;&gt; Conbinate&lt;T1,T2&gt; (this System.Collections.Generic.IEnumerable&lt;T1&gt; e, System.Collections.Generic.IEnumerable&lt;T2&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Tuple`2&lt;!!T1, !!T2&gt;&gt; Conbinate&lt;T1, T2&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T1&gt; e, class System.Collections.Generic.IEnumerable`1&lt;!!T2&gt; target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.4845.5780</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Tuple&lt;T1,T2&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="e" Type="System.Collections.Generic.IEnumerable&lt;T1&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Collections.Generic.IEnumerable&lt;T2&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">The 1st type parameter.</typeparam>
        <typeparam name="T2">The 2nd type parameter.</typeparam>
        <param name="e">The enumerable object.</param>
        <param name="target">To be added.</param>
        <summary>
            Gets all combinations of this and the specified target.
            </summary>
        <returns>Tuples of conbinated objects.</returns>
        <remarks>To be added.</remarks>
        <example>
            new []{0,1,2}.Conbinate(new []{"a","b"}) -&gt; {0,"a"},{0,"b"},{1,"a"},{1,"b"},{2,"a"},{2,"b"}
            </example>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void ForEach&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; e, Action&lt;T&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ForEach&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; e, class System.Action`1&lt;!!T&gt; action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.4845.5780</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="e" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="action" Type="System.Action&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">The 1st type parameter.</typeparam>
        <param name="e">The enumerable object.</param>
        <param name="action">To be added.</param>
        <summary>
            Performs the specified action on each element on the enumerable object.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
